{"version":3,"sources":["components/Formulario/Formulario.js","components/ListDone/ListDone.js","components/ListDo/ListDo.js","components/ListEliminated/ListEliminated.js","components/Copyleft.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","onSubmit","this","props","className","Input","value","onChange","placeholder","Button","type","color","onClick","onRemoveAll","React","Component","ListDone","List","Typography","variant","gutterBottom","list","map","tasks","ListItem","key","task","ListItemText","onhandleToggleTask","ListDo","onRemoveTask","ListEliminated","CopyLeft","Box","mb","height","align","Link","href","Date","getFullYear","App","handleAddTask","event","preventDefault","setState","currentState","items","concat","state","term","active","deleted","handleRemoveTask","find","filter","handleToggleTask","target","handleRemoveAll","Fragment","CssBaseline","Container","display","flexDirection","alignItems","justifyContent","my","paragraph","component","handleCleanList","p","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e8cd54fb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Formulario.scss\";\r\n\r\nimport { Input, Button } from \"@material-ui/core\";\r\n\r\nclass Formulario extends React.Component {\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.props.onSubmit} className=\"Form\">\r\n        <Input\r\n          value={this.props.value}\r\n          onChange={this.props.onChange}\r\n          placeholder=\"Nueva tarea\">\r\n        </Input>\r\n        <Button type=\"submit\"  color=\"primary\" >Submit</Button>\r\n        <Button onClick={this.props.onRemoveAll}  color=\"secondary\">Clear All</Button>\r\n\r\n      </form>\r\n    );\r\n  }\r\n}\r\nexport default Formulario;\r\n","import React from \"react\";\r\n\r\n\r\n//MATERIAL COMPONENTS\r\nimport {\r\n  Typography,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Button,\r\n} from \"@material-ui/core\";\r\n\r\n\r\nconst ListDone = (props) => (\r\n  <List>\r\n    <Typography variant=\"h6\" gutterBottom>\r\n      Realizadas:\r\n    </Typography>\r\n    {props.list.map((tasks) => (\r\n      <ListItem key={tasks.task}>\r\n        <ListItemText>\r\n          {tasks.task}\r\n          <Button onClick={() => props.onhandleToggleTask(tasks.task)}>REALIZAR</Button>\r\n        </ListItemText>\r\n      </ListItem>\r\n    ))}\r\n  </List>\r\n);\r\n\r\nexport default ListDone;\r\n","import React from \"react\";\r\n\r\n//MATERIAL COMPONENTS\r\nimport {\r\n  Typography,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Button,\r\n} from \"@material-ui/core\";\r\n\r\n\r\nconst ListDo = (props) => (\r\n  <List >\r\n    <Typography  variant=\"h6\" gutterBottom>\r\n      A realizar:\r\n    </Typography>\r\n    {props.list.map((tasks) => (\r\n      <ListItem key={tasks.task}>\r\n        <ListItemText>\r\n          {tasks.task}\r\n          <Button onClick={() => props.onhandleToggleTask(tasks.task)}  color=\"primary\">\r\n            REALIZADA\r\n          </Button>\r\n          <Button onClick={() => props.onRemoveTask(tasks.task)} color=\"secondary\">ELIMINAR</Button>\r\n        </ListItemText>\r\n      </ListItem>\r\n    ))}\r\n  </List>\r\n);\r\n\r\nexport default ListDo;\r\n","import React from \"react\";\r\n\r\n\r\n//MATERIAL COMPONENTS\r\nimport {\r\n  Typography,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Button,\r\n} from \"@material-ui/core\";\r\n\r\nconst ListEliminated = (props) => (\r\n  <List>\r\n    <Typography variant=\"h6\" gutterBottom>\r\n      Eliminadas:\r\n    </Typography>\r\n    {props.list.map((tasks) => (\r\n      <ListItem  key={tasks.task}>\r\n        <ListItemText>\r\n          {tasks.task}\r\n          <Button onClick={() => props.onhandleToggleTask(tasks.task)}>\r\n            RESET\r\n          </Button>\r\n        </ListItemText>\r\n      </ListItem>\r\n    ))}\r\n  </List>\r\n);\r\n\r\nexport default ListEliminated;","import React from \"react\";\r\n\r\n//MATERIAL COMPONENTS\r\nimport { Link, Box, Typography } from \"@material-ui/core\";\r\n\r\nfunction CopyLeft() {\r\n  return (\r\n    <Box mb={0} height=\"100%\">\r\n      <Typography variant=\"body2\" color=\"textSecondary\" align=\"left\">\r\n        {\"CopyLeft \"}\r\n        <Link color=\"inherit\" href=\"https://github.com/rociopiotti\">\r\n          <span className=\"copy-left\">Â©</span> rociopiotti.com\r\n        </Link>{\" \"}\r\n        {new Date().getFullYear()}\r\n        {\".\"}\r\n      </Typography>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default CopyLeft;\r\n","import React, { Component } from \"react\";\nimport \"./App.scss\";\nimport Formulario from \"./components/Formulario/Formulario\";\nimport ListDone from \"./components/ListDone/ListDone\";\nimport ListDo from \"./components/ListDo/ListDo\";\nimport ListEliminated from \"./components/ListEliminated/ListEliminated\";\nimport CopyLeft from \"./components/Copyleft\"\n\n//MATERIAL COMPONENTS\nimport {\n  Container,\n  Box,\n  Typography,\n} from \"@material-ui/core\";\n\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [\n        {\n          task: \"cocinar\",\n          active: true,\n          deleted: false,\n        },\n        {\n          task: \"Planchar\",\n          active: true,\n          deleted: false,\n        },\n        {\n          task: \"Ordernar\",\n          active: true,\n          deleted: false,\n        },\n        {\n          task: \"Yoga\",\n          active: false,\n          deleted: false,\n        },\n      ],\n      term: \"\",\n    };\n  }\n// UPDATES TAKS AND ERASE VALUE FROM INPUT\n  handleAddTask = (event) => {\n    event.preventDefault();\n    this.setState((currentState) => {\n      return {\n        items: currentState.items.concat([\n          {\n            task: this.state.term,\n            active: true,\n            deleted: false,\n          },\n        ]),\n        term: \"\",\n      };\n    });\n  };\n// REMOVES TASK AND ADDS DELETED STATE\n  handleRemoveTask = (task) => {\n    this.setState((currentState) => {\n      const tasks = currentState.items.find((tasks) => tasks.task === task);\n      return {\n        items: currentState.items\n          .filter((tasks) => tasks.task !== task)\n          .concat([\n            {\n              task,\n              deleted: !tasks.deleted,\n            },\n          ]),\n      };\n    });\n  };\n// CHAGE STATE BETWEEN ACTIVE\n  handleToggleTask = (task) => {\n    this.setState((currentState) => {\n      const tasks = currentState.items.find((tasks) => tasks.task === task);\n      return {\n        items: currentState.items\n          .filter((tasks) => tasks.task !== task)\n          .concat([\n            {\n              task,\n              active: !tasks.active,\n            },\n          ]),\n      };\n    });\n  };\n// READS INPUT\n  onChange = (event) => {\n    const value = event.target.value;\n    this.setState({ term: value });\n  };\n// CLEARS THE ARRAY\n  handleRemoveAll = () => {\n    this.setState((currentState) => {\n      return {\n        items: [],\n      };\n    });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <CssBaseline />\n        <div className=\"App\">\n          <Container\n            display=\"flex\"\n            flexDirection=\"row\"\n            alignItems=\"flex-start\"\n            justifyContent=\"flex-start\"\n            align=\"left\">\n            <Box my={15}>\n              <Typography\n                paragraph\n                align=\"left\"\n                variant=\"h4\"\n                component=\"h1\"\n                gutterBottom>\n                Lista de tareas:\n              </Typography>\n\n              <Formulario\n                onSubmit={this.handleAddTask}\n                onChange={this.onChange}\n                onRemoveAll={this.handleRemoveAll}\n                value={this.state.term}\n              />\n\n              <ListDo\n                onhandleToggleTask={this.handleToggleTask}\n                list={this.state.items.filter((tasks) => tasks.active === true)}\n                onRemoveTask={this.handleRemoveTask}\n              />\n              <ListDone\n                onhandleToggleTask={this.handleToggleTask}\n                list={this.state.items.filter(\n                  (tasks) => tasks.active === false\n                )}\n              />\n\n              <ListEliminated\n                onhandleToggleTask={this.handleToggleTask}\n                list={this.state.items.filter(\n                  (tasks) => tasks.deleted === true\n                )}\n                onRemoveAll={this.handleCleanList}\n              />\n            </Box>\n            <Box p={1}>\n              <CopyLeft />\n            </Box>\n          </Container>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}